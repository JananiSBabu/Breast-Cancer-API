// <auto-generated />
using System;
using BreastCancerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BreastCancerAPI.Migrations
{
    [DbContext(typeof(PatientContext))]
    [Migration("20210901003959_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BreastCancerAPI.Data.Entities.CellFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<double>("Compactness")
                        .HasColumnType("float");

                    b.Property<double>("ConcavePoints")
                        .HasColumnType("float");

                    b.Property<double>("Concavity")
                        .HasColumnType("float");

                    b.Property<double>("FractalDimension")
                        .HasColumnType("float");

                    b.Property<double>("Perimeter")
                        .HasColumnType("float");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<double>("Smoothness")
                        .HasColumnType("float");

                    b.Property<double>("Symmetry")
                        .HasColumnType("float");

                    b.Property<double>("Texture")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CellFeatures");
                });

            modelBuilder.Entity("BreastCancerAPI.Data.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MRN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("BreastCancerAPI.Data.Entities.PrognosticInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CellFeaturesId")
                        .HasColumnType("int");

                    b.Property<int?>("LymphNodeStatus")
                        .HasColumnType("int");

                    b.Property<string>("Outcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("TumorSize")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CellFeaturesId");

                    b.HasIndex("PatientId");

                    b.ToTable("PrognosticInfos");
                });

            modelBuilder.Entity("BreastCancerAPI.Data.Entities.PrognosticInfo", b =>
                {
                    b.HasOne("BreastCancerAPI.Data.Entities.CellFeatures", "CellFeatures")
                        .WithMany()
                        .HasForeignKey("CellFeaturesId");

                    b.HasOne("BreastCancerAPI.Data.Entities.Patient", "Patient")
                        .WithMany("PrognosticInfos")
                        .HasForeignKey("PatientId");

                    b.Navigation("CellFeatures");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BreastCancerAPI.Data.Entities.Patient", b =>
                {
                    b.Navigation("PrognosticInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
